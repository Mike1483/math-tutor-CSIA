// <auto-generated />
using System;
using BlazorApp3.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BlazorApp3.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("BlazorApp3.Data.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("QuestionHint")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("QuestionType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.HasKey("QuestionId");

                    b.HasIndex("TopicId");

                    b.ToTable("Questions", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("BlazorApp3.Data.TestResult", b =>
                {
                    b.Property<int>("TestResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("NumberOfCorrectAnswers")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfQuestions")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfQuestionsAttempted")
                        .HasColumnType("int");

                    b.Property<double>("ScorePercentage")
                        .HasColumnType("double");

                    b.Property<DateTime>("TestEndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.Property<string>("TopicTitle")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TestResultId");

                    b.HasIndex("TopicId");

                    b.HasIndex("UserId");

                    b.ToTable("TestResults");
                });

            modelBuilder.Entity("BlazorApp3.Data.Topic", b =>
                {
                    b.Property<int>("TopicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Formulas")
                        .HasColumnType("longtext");

                    b.Property<string>("Information")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Theory")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("TopicId");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("BlazorApp3.Data.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BlazorApp3.Data.MultipleChoiceQuestion", b =>
                {
                    b.HasBaseType("BlazorApp3.Data.Question");

                    b.Property<string>("Choice1")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Choice2")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Choice3")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Choice4")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CorrectOption")
                        .IsRequired()
                        .HasColumnType("varchar(1)");

                    b.ToTable("MultipleChoiceQuestions", (string)null);
                });

            modelBuilder.Entity("BlazorApp3.Data.TrueFalseQuestion", b =>
                {
                    b.HasBaseType("BlazorApp3.Data.Question");

                    b.Property<bool>("CorrectAnswer")
                        .HasColumnType("tinyint(1)");

                    b.ToTable("TrueFalseQuestions", (string)null);
                });

            modelBuilder.Entity("BlazorApp3.Data.TypeInQuestion", b =>
                {
                    b.HasBaseType("BlazorApp3.Data.Question");

                    b.Property<string>("CorrectAnswerText")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.ToTable("TypeInQuestions", (string)null);
                });

            modelBuilder.Entity("BlazorApp3.Data.Question", b =>
                {
                    b.HasOne("BlazorApp3.Data.Topic", "Topic")
                        .WithMany("Questions")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("BlazorApp3.Data.TestResult", b =>
                {
                    b.HasOne("BlazorApp3.Data.Topic", "Topic")
                        .WithMany()
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorApp3.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BlazorApp3.Data.MultipleChoiceQuestion", b =>
                {
                    b.HasOne("BlazorApp3.Data.Question", null)
                        .WithOne()
                        .HasForeignKey("BlazorApp3.Data.MultipleChoiceQuestion", "QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BlazorApp3.Data.TrueFalseQuestion", b =>
                {
                    b.HasOne("BlazorApp3.Data.Question", null)
                        .WithOne()
                        .HasForeignKey("BlazorApp3.Data.TrueFalseQuestion", "QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BlazorApp3.Data.TypeInQuestion", b =>
                {
                    b.HasOne("BlazorApp3.Data.Question", null)
                        .WithOne()
                        .HasForeignKey("BlazorApp3.Data.TypeInQuestion", "QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BlazorApp3.Data.Topic", b =>
                {
                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
