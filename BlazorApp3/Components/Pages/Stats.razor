@page "/Stats"
@page "/Stats/{TopicId:int}"

@using BlazorApp3.Services
@using BlazorApp3.Data 
@inject NavigationManager NavigationManager
@inject TestResultService TestResultService
@inject TopicService TopicService
@inject UserSession UserSession

<div class="content-wrapper">
    <div class="button-home-container">
        <button class ="button-home" @onclick="NavigateToTopicSelection"> Home</button>
    </div>
    <style>
        
        .stats-container {
            padding: 15px;
            border: 1px solid #cce0eb; 
            border-radius: 10px; 
            background-color: #fdfdfd; 
            margin-top: 20px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.06); /* Consistent shadow */
        }

        .stats-header {
            text-align: center;
            margin-bottom: 20px;
            color: #333;
        }
        .stats-header h3 {
            font-size: 1.8em;
            margin-bottom: 5px;
        }
        .stats-header p {
            font-size: 1em;
            color: #555;
        }
        .topic-filter-section{
            text-align:center;
            margin-bottom: 15px;
        }
        .topic-filter-section select {
            padding: 8px 12px;
            border-radius: 4px;
            border: 1px solid #ccc;
            font-size: 1em;
        }
        .stats-summary {
            display: flex;
            justify-content: space-around;
            flex-wrap: wrap;
            margin-bottom: 25px;
        }
        .stats-card {
            background-color: #e9f5ff; /* Lighter blue background */
            border: 1px solid #cce0ff;
            border-radius: 5px;
            padding: 10px 15px;
            margin: 8px;
            text-align: center;
            flex: 1 1 calc(33% - 30px); /* Adjust for new margin */
            min-width: 150px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.05);
        }
        .stats-card h4 {
            font-size: 1.1em;
            color: #007bff;
            margin-bottom: 5px;
        }
        .stats-card p {
            font-size: 1.5em;
            font-weight: bold;
            color: #333;
        }
        .no-results {
            text-align: center;
            color: #888;
            margin-top: 20px;
            font-size: 1em;
        }
        .prediction-section {
            margin-top: 30px;
            padding-top: 15px;
            border-top: 1px dashed #e0e0e0;
            text-align: center;
            margin-bottom:30px;
        }
        .prediction-section h4 {
            font-size: 1.5em;
            color: #007bff;
            margin-bottom: 10px;
        }
        .prediction-section p {
            font-size: 1.2em;
            font-weight: bold;
            color: #28a745;
        }
        .prediction-section p.no-prediction {
            color: #888;
        }
    </style>
    
    <div class="stats-container">
        <div class="stats-header">
            <h3> Your Test Statistics</h3>
            @if (_selectedTopicIdForFilter > 0 && _selectedTopicTitle != null)
            {
                <p>For Topic: <strong>@_selectedTopicTitle</strong></p>
            }
            else
            {
                <p>Overall Performance</p>
            }
        </div>
        <div class="topic-filter-section">
            <label for="topic-select" style="margin-right: 10px; font-weight: 600; color: #555;">View Stats For:</label>
            <select id="topic-select" class="form-control" @bind="_selectedTopicIdForFilter" @bind:after="OnTopicFilterChanged">
                <option value ="0">Overall Statistics</option>
                @if (_availableTopics != null)
                {
                    @foreach (var topic in _availableTopics)
                    {
                        <option value="@topic.TopicId"> @topic.Title</option>
                    }
                }
            </select>
        </div>
        @if (_loadingStats)
        {
            <p class="no-results"> Stats are loading...</p>
        } else if (_errorMessage != null)
        {
            <p class="no-results">An unexpected error occured: @_errorMessage</p>
        } else if (!_userTestResults.Any() && _selectedTopicIdForFilter == 0)
        {
            <p class = "no-results"> No test taken yet! Take some tests to see your overall stats!</p>
        } else if (!_userTestResults.Any() && _selectedTopicIdForFilter > 0)
        {
            <p class = "no-results"> No test results found for '@_selectedTopicTitle'.</p>
        }
        else
        {
            <div class="stats-summary">
                <div class="stats-card">
                    <h4>Tests Completed</h4>
                    <p>@_totalTestsCompleted</p>
                </div>
                <div class="stats-card">
                    <h4>Average Score</h4>
                    <p>@_averageScore.ToString("F2")%</p>
                </div>
            </div>
            <h4>Recent Test Results</h4>
            <table class="admin-table">
                <thead>
                <tr>
                    <th>No.</th>
                    <th>Topic</th>
                    <th>Difficulty</th>
                    <th>Score</th>
                </tr>
                </thead>
                <tbody>
                @{ int counter = 0;}
                @foreach (var result in _userTestResults.OrderByDescending(x => x.TestResultId).Take(10))
                {
                    counter++;
                    <tr>
                        <td>@counter</td>
                        <td>@result.TopicTitle</td>
                        <td>@result.Difficulty</td>
                        <td>@result.ScorePercentage.ToString("F0")%</td>
                    </tr>
                }
                </tbody>
            </table>
            <div class="prediction-section">
                <h4>Future Score Prediction</h4>
                @if (_predictedScore.HasValue)
                {
                    <p> Based on your progress, your next test score is predicted to be 
                        <span style ="color: #007bff">@_predictedScore.Value.ToString("F2")% </span>
                    <br/>
                    Your trend is: <strong>@_trendDescription</strong>
                    </p>
                    }
                else
                {
                    <p class = "no-prediction"> There is not enough data to make a reliable prediction yet. Keep takings tests!</p>
                }
            </div>
        }
    </div>
</div>

@code {
    string _errorMessage = "";
    bool _loadingStats;
    [Parameter] public int TopicId { get; set; }

    private List<TestResult> _userTestResults = new List<TestResult>();
    private int _totalTestsCompleted;
    private double _averageScore;

    private int _selectedTopicIdForFilter;
    private string _selectedTopicTitle = "";
    private List<Data.Topic> _availableTopics;

    private double? _predictedScore;
    private string _trendDescription = "Not enough data";
    
    private int _previousTopicId;


    protected override async Task OnInitializedAsync()
    {
        if (!UserSession.UserId.HasValue || UserSession.UserId.Value == 0)
        {
            _errorMessage = "User is not logged in. Cannot find statistics.";
            _loadingStats = false;
            StateHasChanged();
            return;
        }

        int currentUserId = UserSession.UserId.Value;

        try
        {
            _availableTopics = await TopicService.GetAllTopicsAsync(); //Get all available topics 
            if (_availableTopics == null) //Prevents potential null reference error. 
            {
                _availableTopics = new List<Data.Topic>();
            }
        }
        catch (Exception ex)
        {
            _errorMessage = "Failed to load Topics" + ex.Message;
            _loadingStats = false;
            return;
        }
        _selectedTopicIdForFilter = TopicId;
        
        if (_selectedTopicIdForFilter > 0)
        {
            var topic = _availableTopics.FirstOrDefault(x => x.TopicId == TopicId);
            _selectedTopicTitle = topic?.Title ?? "Unknown Topic"; //Checks if it is null and assigns a default name
        }
        else
        {
            _selectedTopicIdForFilter = 0;
            _selectedTopicTitle = "Overall Performance"; //If TopicId = 0, then it changes to overall performance.
        }

        await LoadingStatistics();
    }

    private async Task OnTopicFilterChanged()
    {
        if (_selectedTopicIdForFilter > 0)
        {
            var topic = _availableTopics.FirstOrDefault(x => x.TopicId == _selectedTopicIdForFilter);
            _selectedTopicTitle = topic?.Title ?? "Unknown Topic"; //Checks for null type reference
        }
        else
        {
            _selectedTopicTitle = "Overall Performance";
        }

        await LoadingStatistics();
    }

    private async Task LoadingStatistics()
    {
        _loadingStats = true;
        _errorMessage = null;
        _userTestResults = new List<TestResult>();
        _totalTestsCompleted = 0;
        _averageScore = 0.0;
        
        _predictedScore = null;
        _trendDescription = "Not enough data";

        try
        {
            int currentUserId = (int)UserSession.UserId;
            if (_selectedTopicIdForFilter > 0)
            {
                _userTestResults = await TestResultService.RetrieveTestResults(currentUserId, _selectedTopicIdForFilter); //Retrieves the results of user's specific topic
            }
            else
            {
                _userTestResults = await TestResultService.RetrieveTestResults(currentUserId); //Retrieves all results of the user
            }

            if (_userTestResults.Any())
            {
                _totalTestsCompleted = _userTestResults.Count;
                _averageScore = _userTestResults.Average(x => x.ScorePercentage); //Calculates the average score of all tests taken
                
               _predictedScore = CalculatePredictedScore(_userTestResults);
               _trendDescription = DetermineTrend(_userTestResults);
            }
            else
            {
                _predictedScore = null;
                _trendDescription = "Not enough data";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Failed to load statistics: {ex.Message}";
        }
        finally
        {
            _loadingStats = false;
            StateHasChanged();
        }
    }

    private double? CalculatePredictedScore(List<TestResult> results)
    {
        if (!results.Any() || results == null)
        {
            _errorMessage = "There are not enough test results to make a prediction yet!";
            return null;
        }

        const int numScoreToConsider = 5;
        var sortedResults = results.OrderByDescending(x => x.TestEndTime).ToList();
        if (sortedResults.Count < numScoreToConsider)
        {
            return sortedResults.Average(x => x.ScorePercentage); //Returns a simple average if there are not sufficient number
            //of test results
        }

        double weightedSum = 0.0;
        double totalWeight = 0.0;
        for(int x = 0; x < numScoreToConsider; x++)
        {
            double currentScore = sortedResults[x].ScorePercentage;
            double weight = numScoreToConsider - x;
            weightedSum = weightedSum + currentScore * weight;
            totalWeight += weight;
        }

        if (totalWeight > 0)
        {
            return weightedSum / totalWeight;
        }
        else
        {
            return null;
        }
    }

    private string DetermineTrend(List<TestResult> results)
    {
        const int trendComparisonWindow = 4;
        if (results == null || results.Count < trendComparisonWindow)
        {
            return "Not enough data";
        }

        var sortedResults = results.OrderByDescending(x => x.TestEndTime).ToList();
        var scoresForTrend = sortedResults.Take(trendComparisonWindow).ToList();

        double firstHalfAverage = scoresForTrend.Take(trendComparisonWindow / 2).Average(x => x.ScorePercentage);
        double secondHalfAverage = scoresForTrend.Skip(trendComparisonWindow / 2).Take(trendComparisonWindow / 2).Average(x => x.ScorePercentage);

        const double significantTrend = 2.0;

        if (firstHalfAverage > (secondHalfAverage + significantTrend))
        {
            return "improving";
        } else if (firstHalfAverage < secondHalfAverage - significantTrend)
        {
            return "worsening";
        }
        else
        {
            return "stable";
        }
    }

    private void NavigateToTopicSelection()
    {
        NavigationManager.NavigateTo("/Topic");
    }
}