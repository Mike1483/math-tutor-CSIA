@page "/Practice"
@using BlazorApp3.Data
@using BlazorApp3.Services
@inject NavigationManager NavigationManager
@inject QuestionService QuestionService
@inject UserSession UserSession

<div class="content-wrapper">
<div class="button-home-container">
    <button class ="button-home" @onclick="NavigateToTopic"> Home</button>
</div>
<style>
    .practice-container{
        padding: 20px;
        border: 1px solid #cce0eb; /* Consistent border */
        border-radius: 10px; /* Consistent border-radius */
        margin-top: 20px;
        margin-bottom: 10px;
        background-color: #fdfdfd; /* Consistent background */
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.06); /* Consistent shadow */
    }
    .question-text {
        font-size: 1.5em;
        font-weight: bold;
        margin-bottom: 15px;
        color: #222;
        line-height: 1.6;
    }
    .options-group label {
        display: flex; /* Use flex for alignment of radio/checkbox and text */
        align-items: center;
        margin-bottom: 12px;
        cursor: pointer;
        font-size: 1.1em;
        padding: 12px;
        border: 1px solid #e9ecef;
        border-radius: 8px;
        transition: background-color 0.2s, border-color 0.2s;
        background-color: #fff;
    }
    .options-group label:hover {
        background-color: #f0f5ff; /* Lighter blue on hover */
        border-color: #aaddff;
    }
    .options-group input[type="radio"], .options-group input[type="checkbox"] {
        margin-right: 15px;
        transform: scale(1.2); /* Slightly larger radio/checkbox */
    }

    .practice-feedback {
        padding: 15px;
        border-radius: 8px;
        margin-top: 20px;
        font-weight: bold;
        text-align: center;
    }
    .btn-action{
        margin-top:15px;
    }
    .btn-next{ /* Specific style for next button */
        background-color: #28a745;
    }
    .btn-next:hover{
        background-color: #218838;
    }
    .typein-input {
        width: 100%;
        padding: 8px;
        margin-top: 10px;
        margin-bottom: 10px;
        border: 1px solid #ccc;
        border-radius: 4px;
        font-size: 1em;
    }

    .typein-input:focus {
        border-color: #007bff;
        outline: none;
    }
    .feedback-correct {
        background-color: #e6ffe6; /* Light green */
        color: #1a6d00; /* Darker green */
        border: 1px solid #a3e6a3;
    }

    .feedback-incorrect {
        background-color: #ffe6e6; /* Light red */
        color: #b30000; /* Darker red */
        border: 1px solid #e6a3a3;
    }
    .loading-message, .error-message {
        text-align: center;
        margin-top: 20px;
        font-size: 1.1em;
        color: #555;
    }
    .error-message {
        color: #dc3545;
    }

</style>

@if (!UserSession.isLoggedIn)
{
    <p class="alert alert-danger"> Sorry! only logged in users can access topic selection <br/> Redirecting to login.</p>

} else if (_practiceLoading)
{
    <p> Loading practice questions!</p>
} 
    
<h3 class="main-card-header">Practice</h3>


<div class="tab-content">
                @if (_practiceLoading)
                {
                    <p>Loading practice question...</p>
                }
                else if (_currentPracticeQuestion == null) @* Check if null after loading completes *@
                {
                    <p class="loading-message">No questions found for this topic/difficulty.</p>
                    @if (_practiceErrorMessage != null) { <p class="error-message">Detail: @_practiceErrorMessage</p> }
                    
                    <button class="btn-action" @onclick="LoadRandomPracticeQuestion">Get Question</button>
                } else // Display question if loaded
                {
                    <div class="practice-container">
                        <div class="question-text">
                            @_currentPracticeQuestion.QuestionText
                            
                        </div>
                    </div>
                    @switch (_currentPracticeQuestion.QuestionType)
                    {
                        case QuestionType.MultipleChoice:
                            var mcq = (MultipleChoiceQuestion)_currentPracticeQuestion;
                            <div class="options-group">
                                @for (int i = 0; i < mcq.ShuffledOptions.Count; i++)
                                {
                                    var optionLetter = (char)('A' + i);
                                    <label>
                                        <input type="radio" name="practiceOptions" value="@optionLetter"
                                               @onchange="@(e => HandlePracticeMcqSelection(optionLetter))"
                                               checked="@(_practiceSelectedMcqOption == optionLetter && !_isAnswerChecked)"
                                               disabled="@(_isAnswerChecked)" />
                                        @mcq.ShuffledOptions[i]
                                    </label>
                                }
                            </div>
                            @if (_isAnswerChecked)
                            {
                                <div class="practice-feedback @( _isAnswerCorrect ? "feedback-correct" : "feedback-incorrect")">
                                    @_practiceFeedback
                                </div>
                            }
                            break;
                        case QuestionType.TrueFalse:
                            <div class="options-group">
                                <label>
                                    <input type="radio" name="practiceTfOptions" value="True" @onchange="@(e => HandlePracticeTfSelection(true))"
                                           checked="@(_practiceSelectedTfOption == true && !_isAnswerChecked)" disabled="@(_isAnswerChecked)"/> True
                                </label>
                                <label>
                                    <input type="radio" name="practiceTfOptions" value="False" @onchange="@(e => HandlePracticeTfSelection(false))"
                                           checked="@(_practiceSelectedTfOption == false && !_isAnswerChecked)" disabled="@(_isAnswerChecked)"/> False
                                </label>
                            </div>
                            @if (_isAnswerChecked) // Display feedback after checking
                            {
                                <div class="practice-feedback @( _isAnswerCorrect ? "feedback-correct" : "feedback-incorrect")">
                                    @_practiceFeedback
                                </div>
                            }
                            break;

                        case QuestionType.TypeIn:
                            <input type="text" @bind-value="_practiceTypedInAnswer" @bind-value:event="oninput" class="typein-input" placeholder="Type your answer here..." disabled="@(_isAnswerChecked)"/>
                            @if (_isAnswerChecked) // Display feedback after checking. "Disabled" makes the input field uninteractive.
                            {
                                <div class="practice-feedback @( _isAnswerCorrect ? "feedback-correct" : "feedback-incorrect")">
                                       @_practiceFeedback
                                </div>
                            }
                            break;
                    }
                    
                    <div class="practice-controls">
                        @if (!_isAnswerChecked)
                        {
                            <button class="btn-action" @onclick = "CheckPracticeQuestion">Check Answer</button>
                        }
                        else
                        {
                            <button class="btn-action btn-next" @onclick="LoadRandomPracticeQuestion">Next Question</button>
                        }
                    </div>
                }
               
    </div>
</div>

@code {
    bool _practiceLoading = true;
    bool _isAnswerChecked = false;
    bool _isAnswerCorrect = false;
    private Question _currentPracticeQuestion;
    
    private char _practiceSelectedMcqOption;
    private bool? _practiceSelectedTfOption;
    private string _practiceTypedInAnswer;
    private string _practiceFeedback;
    private string _practiceErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        if (!UserSession.isLoggedIn)
        {
            NavigationManager.NavigateTo("/login", true);
            return;
        }
        await LoadRandomPracticeQuestion();
        
    }

    private async Task LoadRandomPracticeQuestion()
    {
        _practiceLoading = true;
        _practiceErrorMessage = null;

        _isAnswerChecked = false;
        _isAnswerCorrect = false;
        ClearPracticeUserAnswer();
        
        try
        {
            _currentPracticeQuestion = await QuestionService.GetRandomQuestion(); // Use "Easy" or "Medium" based on available data

            if (_currentPracticeQuestion == null)
            {
                _practiceErrorMessage = "No questions were loaded.";
            }
        }
        finally
        {
            _practiceLoading = false;
            StateHasChanged(); //Refreshing UI
        }
    }

    private void CheckPracticeQuestion()
    {
        if (_currentPracticeQuestion == null)
        {
            _practiceFeedback = "No question to check.";
            StateHasChanged();
            return;
        }

        object userAnswer = GetCurrentPracticeAnswer();
        _practiceFeedback = "";
        _isAnswerCorrect = _currentPracticeQuestion.Grade(userAnswer);

        if (_isAnswerCorrect)
        {
            _practiceFeedback = "Correct!";
        }
        else
        {
            string correctAnswerDisplay = "";
            switch (_currentPracticeQuestion.QuestionType)
            {
                case QuestionType.MultipleChoice:
                    var mcq = (MultipleChoiceQuestion)_currentPracticeQuestion;
                    correctAnswerDisplay = $" Correct: '{mcq.CorrectOption}' which is: {GetOptionText(mcq, mcq.CorrectOption)}";
                    break;
                case QuestionType.TrueFalse:
                    var tfq = (TrueFalseQuestion)_currentPracticeQuestion;
                    correctAnswerDisplay = $" Correct: {tfq.CorrectAnswer}.";
                    break;
                case QuestionType.TypeIn:
                    var tiq = (TypeInQuestion)_currentPracticeQuestion;
                    correctAnswerDisplay = $" Correct: '{tiq.CorrectAnswerText}'.";
                    break;
            }

            _practiceFeedback = $"Incorrect.{correctAnswerDisplay}";
        }

        _isAnswerChecked = true;
        StateHasChanged();
    }

    private object GetCurrentPracticeAnswer() //Current User's answer.
        {
            return _currentPracticeQuestion.QuestionType switch
            {
                QuestionType.MultipleChoice => _practiceSelectedMcqOption,
                QuestionType.TrueFalse => _practiceSelectedTfOption,
                QuestionType.TypeIn => _practiceTypedInAnswer, //Used for checking if the answer is correct
                _ => null,
            };
        }
    
    private void HandlePracticeMcqSelection(char optionLetter)
    {
        _practiceSelectedMcqOption = optionLetter;
        _practiceFeedback = string.Empty;
        _isAnswerChecked = false;
    }
    private void HandlePracticeTfSelection(bool value)
    {
        _practiceSelectedTfOption = value;
        _practiceFeedback = string.Empty;
        _isAnswerChecked = false;
    }
    private void ClearPracticeUserAnswer()
    {
        _practiceSelectedMcqOption = default(char);
        _practiceSelectedTfOption = null;
        _practiceTypedInAnswer = string.Empty;
    }
    
    private string GetOptionText(MultipleChoiceQuestion mcq, char optionLetter)
    {
        int index = char.ToUpper(optionLetter) - 'A'; //Take away from ASCII 'D' - 'A' = 3
        if (index >= 0 && index < mcq.ShuffledOptions.Count)
        {
            return mcq.ShuffledOptions[index];
        }
        return "Invalid";
     }
    
    private void NavigateToTopic()
    {
        NavigationManager.NavigateTo("/Topic");
    }
    
}