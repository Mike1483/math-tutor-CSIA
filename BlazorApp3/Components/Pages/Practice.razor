@page "/Practice"
@using System.Text.RegularExpressions
@using BlazorApp3.Data
@using BlazorApp3.Services
@inject NavigationManager NavigationManager
@inject QuestionService QuestionService
@inject UserSession UserSession

<div class="content-wrapper">
    <div class="button-home-container">
        <button class="button-home" @onclick="NavigateToTopic"> Home</button>
    </div>
    <style>

        .main-practice-header { /* main title on this page */
            text-align: center;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 1px solid #e0e0e0;
            font-size: 2em;
            font-weight: 700;
            color: #333;
        }

        .practice-container {
            padding: 25px;
            border: 1px solid #cce0eb; /* Consistent border */
            border-radius: 10px; /* Consistent border-radius */
            margin-top: 20px;
            margin-bottom: 10px;
            background-color: #fdfdfd; /* Consistent background */
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.06); /* Consistent shadow */
        }

        .question-text {
            font-size: 1.5em;
            font-weight: bold;
            margin-bottom: 15px;
            color: #222;
            line-height: 1.6;
        }

        .options-group label {
            display: flex; /* Use flex for alignment of radio/checkbox and text */
            align-items: center;
            margin-bottom: 15px;
            cursor: pointer;
            font-size: 1.15em;
            padding: 15px 20px;
            border: 1px solid #e9ecef;
            border-radius: 10px;
            transition: background-color 0.2s, border-color 0.2s;
            background-color: #fefefe;
        }

        .options-group label:hover {
            background-color: #f0f5ff; /* Lighter blue on hover */
            border-color: #99ccff;;
            transform: translateY(-2px);
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.08);
        }

        .options-group input[type="radio"],
        .options-group input[type="checkbox"] {
            margin-right: 20px; /* More space between input and text */
            transform: scale(1.3); /* Slightly reduced scale from 1.5, for better balance */
            -webkit-appearance: none; /* Hide default radio/checkbox */
            -moz-appearance: none;
            appearance: none;
            width: 24px; /* Size of the custom checkbox/radio */
            height: 24px;
            border: 2px solid #007bff; /* Blue border */
            border-radius: 50%; /* Make it round for radio, square for checkbox */
            outline: none;
            cursor: pointer;
            position: relative;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s ease;
        }

        .options-group input[type="checkbox"] {
            border-radius: 6px; /* square for checkbox */
        }

        .options-group input[type="radio"]::before,
        .options-group input[type="checkbox"]::before {
            content: '';
            width: 12px;
            height: 12px;
            background-color: #007bff; /* Blue fill */
            border-radius: 50%; /* Round for radio */
            transform: scale(0); /* Hidden by default */
            transition: transform 0.2s ease;
        }

        .options-group input[type="checkbox"]::before {
            border-radius: 3px; /* Square for checkbox */
        }

        .options-group input[type="radio"]:checked,
        .options-group input[type="checkbox"]:checked {
            background-color: #e6f2ff; /* Light blue background when checked */
            border-color: #0056b3; /* Darker blue border when checked */
        }

        .options-group input[type="radio"]:checked::before,
        .options-group input[type="checkbox"]:checked::before {
            transform: scale(1); /* Show inner circle/square when checked */
        }

        .options-group input[type="radio"]:disabled,
        .options-group input[type="checkbox"]:disabled,
        .form-control:disabled {
            opacity: 0.7;
            cursor: not-allowed;
            background-color: #e9ecef;
            border-color: #ced4da;
        }

        .btn-action {
            margin-top: 15px;
        }

        .btn-next {
            background-color: #28a745;
        }

        .btn-next:hover {
            background-color: #218838;
        }

        .typein-input {
            margin-top: 10px;
            margin-bottom: 10px;
        }

        .practice-feedback {
            padding: 15px;
            border-radius: 8px;
            margin-top: 20px;
            font-weight: bold;
            text-align: center;
        }

        .question-hint {
            background-color: #f0f8ff; /* Light blue background */
            border: 1px solid #b0e0e6; /* Light blue border */
            border-left: 5px solid #87ceeb; /* More prominent left border */
            padding: 15px;
            margin-top: 20px;
            border-radius: 8px;
            font-style: italic;
            color: #36454F; /* Darker text for readability */
            font-size: 0.95em;
        }

        .loading-message {
            text-align: center;
            margin-top: 20px;
            font-size: 1.1em;
            color: #555;
        }

    </style>

    @if (!UserSession.isLoggedIn)
    {
        <p class="alert alert-danger"> Sorry! only logged in users can access topic selection <br/> Redirecting to
            login.</p>
    }
    else if (_practiceLoading)
    {
        <p class="loading-message"> Loading practice questions!</p>
    }

    <h3 class="main-practice-header">Practice</h3>


    @if (_practiceLoading)
    {
        <p class="loading-message">Loading practice question...</p>
    }
    else if (_currentPracticeQuestion == null) @* Check if null after loading completes *@
    {
        <p class="loading-message">No questions found for this topic/difficulty.</p>
        @if (_practiceErrorMessage != null)
        {
            <p class="alert alert-danger">Detail: @_practiceErrorMessage</p>
        }

        <button class="btn-action" @onclick="LoadRandomPracticeQuestion">Get Question</button>
    }
    else // Display question if loaded
    {
        <div class="practice-container">
            <div class="question-text">
                @RemoveHtmlTags(_currentPracticeQuestion.QuestionText)

            </div>
        </div>
        @switch (_currentPracticeQuestion.QuestionType)
        {
            case QuestionType.MultipleChoice:
                var mcq = (MultipleChoiceQuestion)_currentPracticeQuestion;
                <div class="options-group">
                    @for (int i = 0; i < mcq.ShuffledOptions.Count; i++)
                    {
                        var optionLetter = (char)('A' + i);
                        <label>
                            <input type="radio" name="practiceOptions" value="@optionLetter"
                                   @onchange="@(e => HandlePracticeMcqSelection(optionLetter))"
                                   checked="@(_practiceSelectedMcqOption == optionLetter && !_isAnswerChecked)"
                                   disabled="@(_isAnswerCorrect)"/>
                            @mcq.ShuffledOptions[i]
                        </label>
                    }
                </div>
                @if (_isAnswerChecked)
                {
                    <div class="practice-feedback @(_isAnswerCorrect ? "feedback-correct" : "feedback-incorrect")">
                        @_practiceFeedback
                    </div>
                }

                break;
            case QuestionType.TrueFalse:
                <div class="options-group">
                    <label>
                        <input type="radio" name="practiceTfOptions" value="True"
                               @onchange="@(e => HandlePracticeTfSelection(true))"
                               checked="@(_practiceSelectedTfOption == true && !_isAnswerChecked)"
                               disabled="@(_isAnswerCorrect)"/> True
                    </label>
                    <label>
                        <input type="radio" name="practiceTfOptions" value="False"
                               @onchange="@(e => HandlePracticeTfSelection(false))"
                               checked="@(_practiceSelectedTfOption == false && !_isAnswerChecked)"
                               disabled="@(_isAnswerCorrect)"/> False
                    </label>
                </div>
                @if (_isAnswerChecked) // Display feedback after checking
                {
                    <div class="practice-feedback @(_isAnswerCorrect ? "feedback-correct" : "feedback-incorrect")">
                        @_practiceFeedback
                    </div>
                }

                break;

            case QuestionType.TypeIn:
                <input type="text" @bind-value="_practiceTypedInAnswer" @bind-value:event="oninput"
                       class="typein-input form-control" placeholder="Type your answer here..."
                       disabled="@(_isAnswerCorrect)"/>
                @if (_isAnswerChecked) // Display feedback after checking. "Disabled" makes the input field uninteractive.
                {
                    <div class="practice-feedback @(_isAnswerCorrect ? "feedback-correct" : "feedback-incorrect")">
                        @_practiceFeedback
                    </div>
                }

                break;
        }

        @if (_isAnswerChecked && !_isAnswerCorrect && !string.IsNullOrEmpty(_currentPracticeQuestion.QuestionHint))
        {
            <div class="question-hint">
                Hint: @RemoveHtmlTags(_currentPracticeQuestion.QuestionHint)
            </div>
        }

        <div class="practice-controls">
            @if (!_isAnswerCorrect)
            {
                <button class="btn-action" @onclick="CheckPracticeQuestion">Check Answer</button>
            }
            @if (_isAnswerChecked)
            {
                <button class="btn-action btn-next" @onclick="LoadRandomPracticeQuestion">Next Question</button>
            }
        </div>
    }

</div>


@code {
    bool _practiceLoading = true;
    bool _isAnswerChecked = false;
    bool _isAnswerCorrect = false;
    bool _showHint = false;
    private Question _currentPracticeQuestion;

    private int _incorrectAttempts = 0;
    private char _practiceSelectedMcqOption;
    private bool? _practiceSelectedTfOption;
    private string _practiceTypedInAnswer;
    private string _practiceFeedback;
    private string _practiceErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        if (!UserSession.isLoggedIn)
        {
            NavigationManager.NavigateTo("/", true);
            return;
        }

        await LoadRandomPracticeQuestion();
    }

    private async Task LoadRandomPracticeQuestion()
    {
        _practiceLoading = true;
        _practiceErrorMessage = null;

        _isAnswerChecked = false;
        _isAnswerCorrect = false;
        _showHint = false;
        _incorrectAttempts = 0;
        ClearPracticeUserAnswer();

        try
        {
            _currentPracticeQuestion = await QuestionService.GetRandomQuestion(); // Use "Easy" or "Medium" based on available data

            if (_currentPracticeQuestion == null)
            {
                _practiceErrorMessage = "No questions were loaded.";
            }
        }
        finally
        {
            _practiceLoading = false;
            StateHasChanged(); //Refreshing UI
        }
    }

    private void CheckPracticeQuestion()
    {
        if (_currentPracticeQuestion == null)
        {
            _practiceFeedback = "No question to check.";
            StateHasChanged();
            return;
        }

        object userAnswer = GetCurrentPracticeAnswer();
        _practiceFeedback = "";
        _isAnswerCorrect = _currentPracticeQuestion.Grade(userAnswer);

        if (_isAnswerCorrect)
        {
            _practiceFeedback = "Correct!";
            _showHint = false;
            _incorrectAttempts = 0;
        }
        else
        {
            _incorrectAttempts++;
            string correctAnswerDisplay = "";

            if (_incorrectAttempts == 1) // First incorrect attempt
            {
                _practiceFeedback = "Incorrect. Try again!";
            }
            else
            {
                switch (_currentPracticeQuestion.QuestionType)
                {
                    case QuestionType.MultipleChoice:
                        var mcq = (MultipleChoiceQuestion)_currentPracticeQuestion;
                        correctAnswerDisplay = $" Correct: '{mcq.CorrectOption}' which is: {GetOptionText(mcq, mcq.CorrectOption)}";
                        break;
                    case QuestionType.TrueFalse:
                        var tfq = (TrueFalseQuestion)_currentPracticeQuestion;
                        correctAnswerDisplay = $" Correct: {tfq.CorrectAnswer}.";
                        break;
                    case QuestionType.TypeIn:
                        var tiq = (TypeInQuestion)_currentPracticeQuestion;
                        correctAnswerDisplay = $" Correct: '{tiq.CorrectAnswerText}'.";
                        break;
                }

                _practiceFeedback = $"Incorrect.{correctAnswerDisplay}";
            }

            _showHint = true;
        }

        _isAnswerChecked = true;
        StateHasChanged();
    }

    private object GetCurrentPracticeAnswer() //Current User's answer.
    {
        return _currentPracticeQuestion.QuestionType switch
        {
            QuestionType.MultipleChoice => _practiceSelectedMcqOption,
            QuestionType.TrueFalse => _practiceSelectedTfOption,
            QuestionType.TypeIn => _practiceTypedInAnswer, //Used for checking if the answer is correct
            _ => null,
        };
    }

    private void HandlePracticeMcqSelection(char optionLetter)
    {
        _practiceSelectedMcqOption = optionLetter;
        _practiceFeedback = string.Empty;
        _isAnswerChecked = false;
        _showHint = false;
    }

    private void HandlePracticeTfSelection(bool value)
    {
        _practiceSelectedTfOption = value;
        _practiceFeedback = string.Empty;
        _isAnswerChecked = false;
        _showHint = false;
    }

    private void ClearPracticeUserAnswer()
    {
        _practiceSelectedMcqOption = default(char);
        _practiceSelectedTfOption = null;
        _practiceTypedInAnswer = string.Empty;
    }

    private string GetOptionText(MultipleChoiceQuestion mcq, char optionLetter)
    {
        int index = char.ToUpper(optionLetter) - 'A'; //Take away from ASCII 'D' - 'A' = 3
        if (index >= 0 && index < mcq.ShuffledOptions.Count)
        {
            return mcq.ShuffledOptions[index];
        }

        return "Invalid";
    }

    private void NavigateToTopic()
    {
        NavigationManager.NavigateTo("/Topic");
    }

    private string RemoveHtmlTags(string html) // this purely for looks. 
    {
        if (string.IsNullOrEmpty(html))
            return html;
        return Regex.Replace(html, "<.*?>", string.Empty);
    }

}