@page "/Register"
@using BlazorApp3.Services
@using Microsoft.AspNetCore.Components.Forms
@inject UserService UserService
@using BCrypt.Net
@inject NavigationManager NavigationManager

<div class="content-wrapper">
    <div class="button-home-container">
        <button class="button-home" @onclick="NavigateToLogin">Login</button>
    </div>
    <style>
        .register-card {
            padding: 30px;
            border: 1px solid #e0e0e0;
            border-radius: 10px;
            background-color: #fefefe;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
            text-align: center;
            margin-top: 0px;
            
        }
        .registration-form-layout{
            display: flex;
            justify-content: center;
            align-items: flex-start;
            gap: 30px;
            margin-bottom:5px;
            max-width: 750px;
            margin-left: auto;
            margin-right: auto;
        }
        .input-column {
            display: flex;
            flex-direction: column;
            flex-basis: 350px; 
            flex-shrink: 0; 
            gap: 0px; 
        }
        .register-card .form-group {
            max-width: none;
            margin-left: 0;
            margin-right: 0;
            margin-bottom: 0px;
          
        }

        .btn-secondary {
            background-color: #6c757d;
            margin-left: 10px;
        }
        .btn-secondary:hover {
            background-color: #5a6268;
        }

        .error-message {
            color: #dc3545;
            font-size: 0.875em;
            margin-top: 0px;
            margin-bottom: 0px;
            text-align: left;
            line-height: 1.2;
        }

        .password-requirements {
        list-style: none; /* Remove default bullet points */
        padding: 10px 15px;
        margin-top: 0px;
        margin-left: 0; 
        margin-right: 0;
        flex-basis: 300px;
        flex-shrink: 0;
        
        
        border: 1px solid #ddd;
        border-radius: 5px;
        background-color: #f9f9f9;
        text-align:left;
        font-size: 0.95em;
    }
    .password-requirements li {
        padding: 8px 0;
        display: flex;
        align-items: center;
        gap: 8px; 
    }

        .password-requirements li::before { /* Custom checkmark/cross icon */
            content: '\2717'; /* Unicode cross mark */
            color: #dc3545; /* Red for invalid */
            font-weight: bold;
            font-size: 1.2em;
        }

        .password-requirements li.valid::before {
            content: '\2713'; /* Unicode check mark */
            color: #28a745; /* Green for valid */
        }

        .password-requirements li.valid {
            color: #28a745; /* Green text for valid */
        }

        .password-requirements li.invalid {
            color: #dc3545; /* Red text for invalid */
        }
        .alert {
            margin-top: 7px; /* Add space above the alert */
        }
    
</style>
    <div class="register-card">
        <h1 class="main-card-header">Register New Account</h1>
        <div class="registration-form-layout">
            <div class="input-column">

            <div class="form-group">
                <label for="firstName">First Name:</label>
                <input type="text" id="firstName" @bind="firstname" class="form-control"/>
                @if (!string.IsNullOrEmpty(firstNameError))
                {
                    <p class="error-message">@firstNameError</p>
                }
            </div>
            <div class="form-group">
                <label for="lastName">Last Name:</label>
                <input type="text" id="lastName" @bind="lastname" class="form-control"/>
                @if (!string.IsNullOrEmpty(lastNameError))
                {
                    <p class="error-message">@lastNameError</p>
                }
            </div>
            <div class="form-group">
                <label for="username">Username:</label>
                <input type="text" id="username" @bind="username" class="form-control"/>
                @if (!string.IsNullOrEmpty(usernameError))
                {
                    <p class="error-message">@usernameError</p>
                }
            </div>
            <div class="form-group">
                <label for="email">Email:</label>
                <input type="email" id="email" @bind="email" class="form-control"/>
                @if (!string.IsNullOrEmpty(emailError))
                {
                    <p class="error-message">@emailError</p>
                }
            </div>
            <div class="form-group">
                <label for="password">Password:</label>
                <input type="password" id="password" @bind="password" class="form-control" @oninput="OnPasswordInput"/>
                @if (!string.IsNullOrEmpty(passwordError))
                {
                    <p class="error-message">@passwordError</p>
                }
            </div>
            </div>
            <ul class="password-requirements"> Password must:
                <li class="@(hasLength ? "valid" : "invalid")"> Have at least 7 letters </li>
                <li class="@(hasUpper ? "valid" : "invalid")"> Have at least 1 uppercase letter </li>
                <li class="@(hasDigit ? "valid" : "invalid")"> Have at least 1 number </li>
                <li class="@(hasSpecial ? "valid" : "invalid")"> Have at least 1 special character </li>
            </ul>
        </div>


            <button class="btn-action" @onclick="attemptRegister">Register</button>

            @if (registrationSuccess)
            {
                <div class="alert alert-success">Registration Successful!</div>
            }
            @if (registrationFail)
            {
                <div class="alert alert-danger">Registration Failed: @errorMessage</div>
            }
        </div>
    </div>
@code {
    private string username;
    private string password;
    private string firstname;
    private string lastname;
    private string email;
    
    private string firstNameError = string.Empty;
    private string lastNameError = string.Empty;
    private string usernameError = string.Empty;
    private string emailError = string.Empty;
    private string passwordError = string.Empty;
    
    bool registrationFail = false;
    bool registrationSuccess = false;
    string errorMessage = " ";
    
    //Password requirements
    bool hasLength = false;
    bool hasUpper = false;
    bool hasDigit = false;
    bool hasSpecial = false;
    
    private System.Text.RegularExpressions.Regex nameRegex = new System.Text.RegularExpressions.Regex(@"^[a-zA-Z\s'-]+$");
    private System.Text.RegularExpressions.Regex emailRegex = new System.Text.RegularExpressions.Regex(@"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$");

    void OnPasswordInput(ChangeEventArgs a)
    {
        password = a.Value?.ToString() ?? "";
        UpdatePasswordRequirements();
        passwordError = string.Empty;
    }
    
    void UpdatePasswordRequirements() 
    {
        // Requirement Length
        hasLength = password.Length >= 7;
      
        hasUpper = false;
        hasDigit = false;
        hasSpecial = false;

        // Requirement 2, 3, 4
        foreach (char c in password)
        {
            if (char.IsUpper(c))
            {
                hasUpper = true;
            }
            if (char.IsDigit(c))
            {
                hasDigit = true;
            }
            if (!char.IsLetterOrDigit(c))
            {
                hasSpecial = true;
            }

            if (hasUpper && hasDigit && hasSpecial)
            {
                break; 
            }
        }
    }

    bool isPasswordValid()
    {
        return hasLength && hasDigit && hasUpper && hasSpecial;
    }

    private bool ValidateInput()
    {
        bool isValid = true;
        firstNameError = string.Empty;
        lastNameError = string.Empty;
        usernameError = string.Empty;
        emailError = string.Empty;
        passwordError = string.Empty;
        errorMessage = string.Empty;
        
        if(string.IsNullOrWhiteSpace(firstname))
        {
            firstNameError = "First name is required";
            isValid = false;
        } 
        else if (!nameRegex.IsMatch(firstname))
        {
            firstNameError = "First name cannot have special symbols or numbers.";
            isValid = false;
        }
        
        if(string.IsNullOrWhiteSpace(lastname))
        {
            lastNameError = "Last name is required";
            isValid = false;
        } 
        else if (!nameRegex.IsMatch(lastname))
        {
            lastNameError = "First name cannot have special symbols or numbers.";
            isValid = false;
        }
        if (string.IsNullOrWhiteSpace(username))
        {
            usernameError = "Username is required.";
            isValid = false;
        }
        if (string.IsNullOrWhiteSpace(email))
        {
            emailError = "Email is required.";
            isValid = false;
        }
        else if (!emailRegex.IsMatch(email))
        {
            emailError = "Invalid email address format.";
            isValid = false;
        } 
        if (string.IsNullOrWhiteSpace(password))
        {
            passwordError = "Password is required.";
            isValid = false;
        }
        else if (!isPasswordValid())
        {
            passwordError = "Password does not meet all strength requirements.";
            isValid = false;
        }

        return isValid;
    }
    async Task attemptRegister()
    {
        registrationSuccess = false; // Reset status messages
        registrationFail = false;
        errorMessage = string.Empty;

        // Basic validation: Check if any field is empty or just whitespace
        if (!ValidateInput())
        {
            registrationFail = true;
            errorMessage = "Please correct the errors in the form."; // General message for client-side validation failure
            return; // Stop the method here if client-side validation fails
        }
        
        try
        {
            // Optional: Check if username or email already exists to prevent duplicates
            var existingUser = await UserService.GetUserByUserName(username);

            if (existingUser != null) //Check if a user already exists.
            {
                registrationFail = true;
                errorMessage = "A user in this username already exists";
                return;
            }

            string hashedPassword = BCrypt.HashPassword(password);

            var newUser = new Data.User
            {
                UserName = username,
                FirstName = firstname,
                LastName = lastname,
                Email = email,
                PasswordHash = hashedPassword,
                IsAdmin = false
            };

            bool registered = await UserService.RegisterUser(newUser);
            if (registered)
            {
                registrationSuccess = true;
                ClearFormFields(); // Clear the form fields after successful registration
            }
            else
            {
                // This 'else' block will be hit if UserService.RegisterUser returns false
                // (e.g., if the email was already taken, or another race condition occurred)
                registrationFail = true;
                errorMessage = "Registration failed. Email might already be taken.";
            }
        }
        catch (Exception ex)
        {
            registrationFail = true;
            errorMessage = $"An unexpected error occurred: {ex.Message}";

        }
    }

    private void NavigateToLogin()
    {
        NavigationManager.NavigateTo("/");
    }
    private void ClearFormFields()
    {
        firstname = string.Empty;
        lastname = string.Empty;
        username = string.Empty;
        email = string.Empty;
        password = string.Empty;
        UpdatePasswordRequirements(); //Reset requirement indicators
    }

}