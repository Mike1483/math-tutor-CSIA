@page "/Register"
@using BlazorApp3.Services
@using Microsoft.AspNetCore.Components.Forms
@inject UserService UserService
@using BCrypt.Net
@inject NavigationManager NavigationManager

<div class="content-wrapper">
    <div class="button-home-container">
        <button class="button-home" @onclick="NavigateToLogin">Login</button>
    </div>
    <style>
        .register-card {
            padding: 30px;
            border: 1px solid #e0e0e0;
            border-radius: 10px;
            background-color: #fefefe;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
            text-align: center;
            margin-top: 30px;
        }
        .form-group {
            max-width: 350px; /* Constrain form width */
            margin-left: auto;
            margin-right: auto;
        }
        .btn-action {
            margin-top: 20px;
        }
        .registration-form-layout {
            display: flex; 
            justify-content: center; 
            align-items: flex-start; 
            gap: 30px; 
            margin-bottom: 20px; 
            max-width: 800px; 
            margin-left: auto;
            margin-right: auto;
        }
        .input-column {
            display: flex;
            flex-direction: column;
            flex-basis: 350px; 
            flex-shrink: 0; 
            gap: 15px; 
        }
        .input-column .form-group {
            margin-left: 0; /* Remove auto margins as it's a flex item */
            margin-right: 0;
            margin-bottom: 0; /* Remove individual bottom margins, gap handles spacing */
        }
        
    .password-requirements {
        list-style: none; /* Remove default bullet points */
        padding: 10px 15px;
        margin-top: 0px;
        margin-left: 0;
        margin-right: 0;
        flex-basis:300px;
        flex-shrink:0;
        
        border: 1px solid #ddd;
        border-radius: 5px;
        background-color: #f9f9f9;
        text-align:left;
        font-size: 0.95em;
    }
    .password-requirements li {
        padding: 8px 0;
        display: flex;
        align-items: center;
        gap: 8px; 
    }
        .password-requirements li::before { /* Custom checkmark/cross icon */
            content: '\2717'; /* Unicode cross mark */
            color: #dc3545; /* Red for invalid */
            font-weight: bold;
            font-size: 1.2em;
        }
        .password-requirements li.valid::before {
            content: '\2713'; /* Unicode check mark */
            color: #28a745; /* Green for valid */
        }
    .password-requirements li.valid {
        color: #28a745; /* Green text for valid */
    }
    .password-requirements li.invalid {
        color: #dc3545; /* Red text for invalid */
    }
    
</style>
    <div class="register-card">
        <h1 class="main-card-header">Register New Account</h1>

        <div class="registration-form-layout">
            <div class="input-column">
                <div class="form-group">
                    <label for="username">Username:</label>
                    <input type="text" id="username" class="form-control" @bind="username" />
                </div>
                <div class="form-group">
                    <label for="firstname">First Name:</label>
                    <input type="text" id="firstname" class="form-control" @bind="firstname" />
                </div>
                <div class="form-group">
                    <label for="password">Password:</label>
                    <input type="password" id="password" class="form-control" @bind="password" @oninput="OnPasswordInput" />
                </div>
            </div>
                <ul class="password-requirements"> Password must:
                    <li class="@(hasLength ? "valid" : "invalid")"> Have at least 7 letters </li>
                    <li class="@(hasUpper ? "valid" : "invalid")"> Have at least 1 uppercase letter </li>
                    <li class="@(hasDigit ? "valid" : "invalid")"> Have at least 1 number </li>
                    <li class="@(hasSpecial ? "valid" : "invalid")"> Have at least 1 special character </li>
                </ul>
            </div>

            <button class="btn-action" @onclick="attemptRegister">Register</button>

            @if (registrationSuccess)
            {
                <div class="alert alert-success">Registration Successful!</div>
            }
            @if (registrationFail)
            {
                <div class="alert alert-danger">Registration Failed: @errorMessage</div>
            }
        </div>
    </div>
@code {
    string username;
    string password;
    string firstname;
    string lastname;
    
    bool registrationFail = false;
    bool registrationSuccess = false;
    string errorMessage = " ";
    
    //Password requirements
    bool hasLength = false;
    bool hasUpper = false;
    bool hasDigit = false;
    bool hasSpecial = false;

    void OnPasswordInput(ChangeEventArgs a)
    {
        password = a.Value?.ToString() ?? "";
        
        UpdatePasswordRequirements();
    }
    
    void UpdatePasswordRequirements() 
    {
        // Requirement Length
        hasLength = password.Length >= 7;
      
        hasUpper = false;
        hasDigit = false;
        hasSpecial = false;

        // Requirement 2, 3, 4
        foreach (char c in password)
        {
            if (char.IsUpper(c))
            {
                hasUpper = true;
            }
            if (char.IsDigit(c))
            {
                hasDigit = true;
            }
            if (!char.IsLetterOrDigit(c))
            {
                hasSpecial = true;
            }

            if (hasUpper && hasDigit && hasSpecial)
            {
                break; 
            }
        }
    }

    bool isPasswordValid()
    {
        return hasLength && hasDigit && hasUpper && hasSpecial;
    }

    async Task attemptRegister()
    {
        registrationSuccess = false; // Reset status messages
        registrationFail = false;

        // Basic validation: Check if any field is empty or just whitespace
        if (string.IsNullOrWhiteSpace(username) || string.IsNullOrWhiteSpace(password))
        {
            registrationFail = true;
            return; // Stop the method here if validation fails
        }

        if (!isPasswordValid())
        {
            errorMessage = "The password doesn't meet all of the requirements";
            registrationFail = true;
            return;
        }

        try
        {
            // Optional: Check if username or email already exists to prevent duplicates
            var existingUser = await UserService.GetUserByUserName(username);

            if (existingUser != null) //Check if a user already exists.
            {
                registrationFail = true;
                errorMessage = "A user in this username already exists";
                return;
            }

            string hashedPassword = BCrypt.HashPassword(password);

            var newUser = new BlazorApp3.Data.User
            {
                UserName = username,
                FirstName = firstname,
                // Email = email,
                PasswordHash = hashedPassword //  HASH 
            };

            await UserService.AddUser(newUser);
            registrationSuccess = true;


            // Clear the form fields after successful registration
            username = "";
            firstname = "";
            //email = "";
            password = "";
            UpdatePasswordRequirements(); //Reset requirement indicators
        }
        catch (Exception ex)
        {
            registrationFail = true;
        }
    }

    private void NavigateToLogin()
    {
        NavigationManager.NavigateTo("/");
    }

}